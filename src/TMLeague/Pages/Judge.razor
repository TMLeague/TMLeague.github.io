@page "/league/{leagueId}/judge"
@using System.Text.RegularExpressions
@using System.Web
@inject LeagueService LeagueService
@inject IJSRuntime JsRuntime
<h3>@LeagueName</h3>
<h4>Draft generator</h4>

<lead>
    Welcome to the Silent League generator. If you are here, that means that you are a judge that who wants to generate the draft for a new Season!<br />
    Fill in the configuration. Make sure that you enter the correct data so you don't have to correct it manually later!<br />
    When you submit the form, draft would be generated.<br />
    Remember to save the draft, because it is not stored anywhere else!
    @if (DivisionDraft?.IsRandom ?? false)
    {
        <div class="alert alert-warning mt-3 mb-0" role="alert">
            <p class="mt-0 mb-1">You have chosen to generate a random draft or the number of players for whom there is no predefined draft. Check the quality of the drawn draft before you use it!</p>
            <p class="my-1">If you click on the "Show stats" button, you will see some additional characteristics of the generated draft. Minimizing the standard deviation is usually a good enough measure.</p>
            <p class="my-1">If the generated draft does not meet your expectations, you can click "Generate draft" (or "Enter" on your keyboard) again.</p>
            <p class="mt-1 mb-0">If you want to take more time to find a better draft, check the 'Use random draft' option, set the 'Timeout' and the weights you assign to each measure of draft quality. A value of 0 allows you to disregard a measure.</p>
        </div>
    }
</lead>

@if (LeagueId != null)
{
    <div class="row my-2">
        <a href="@($"{RouteProvider.GetLeagueDivisionCreationRoute(LeagueId, DivisionForm?.Season, DivisionForm?.Division, DivisionForm?.JudgeName, DivisionForm?.PlayerNames)}")" target="_blank" class="btn btn-primary w-100 text-inherit">Add new division configuration</a>
    </div>
}

@if (DivisionDraft != null || _isDraftLoading)
{
    <h4 class="mt-4">Draft table</h4>
    @if (_isDraftLoading)
    {
        <Loading></Loading>
    }
    else if (DivisionDraft != null)
    {
        <table class="table table-dark table-draft align-middle pb-0 mx-auto" width="@(TableWidth)px" style="max-width: @(TableWidth)px">
            <thead>
                <tr>
                    <th scope="col" class="bg-transparent" style="width: 200px" colspan="2">Message</th>
                    <th scope="col" class="bg-transparent" style="width: 200px"></th>
                    @for (var i = 0; i < DivisionDraft.Games; ++i)
                    {
                        <th scope="col" style="width: 100px">@($"G{i + 1}")</th>
                    }
                    @if (_areStatsVisible)
                    {
                        @foreach (var player in DivisionDraft.Draft)
                        {
                            <td>@player.Name</td>
                        }
                        <th scope="col" style="width: 100px" class="tt" ontouchstart="">Neighbor<div class="tt-inner px-3">Number of games with the same player as a neighbor</div></th>
                        <th scope="col" style="width: 100px" class="tt" ontouchstart="">Player<div class="tt-inner px-3">Number of games against the same player</div></th>
                        <th scope="col" style="width: 100px" class="tt" ontouchstart="">Proximity<div class="tt-inner px-3">Approximate measure of total strength of interactions between players</div></th>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var player in DivisionDraft.Draft)
                {
                    <tr>
                        <td class="bg-transparent p-0">
                            <button class="btn btn-primary" @onclick="() => CopyTextToClipboard(player.MessageBody)">Copy</button>
                        </td>
                        <td class="bg-transparent p-0">
                            <a href="@($"https://www.thronemaster.net/?goto=account&sub=private_messages&type=new&to={player.Name}")" target="blank"
                               class="btn btn-primary" @onclick="() => CopyTextToClipboard(player.MessageBody)">Send</a>
                        </td>
                        <th scope="row">@player.Name</th>
                        @foreach (var house in player.Games)
                        {
                            <PlayerGameCell House="house"></PlayerGameCell>
                        }
                        @if (_areStatsVisible)
                        {
                            @foreach (var stat in player.Stats)
                            {
                                @if (stat == null)
                                {
                                    <td></td>
                                }
                                else
                                {
                                    <td class="fs-10">
                                        <p class="m-0">@($"{stat.Neighbor}/{stat.Games}")</p>
                                        <p class="m-0">@Math.Round(stat.Proximity, 1)</p>
                                    </td>
                                }
                            }
                            <td>@($"{player.Stats.NeighborMin}-{player.Stats.NeighborMax}")</td>
                            <td>@($"{player.Stats.GameMin}-{player.Stats.GameMax}")</td>
                            <td>@($"{Math.Round(player.Stats.ProximityMin, 1)}-{Math.Round(player.Stats.ProximityMax, 1)}")</td>
                        }
                    </tr>
                }
            </tbody>
        </table>

        @if (_areStatsVisible)
        {
            <p class="m-0">Neighbor range: <span class="fw-bold">@($"{DivisionDraft.NeighborMin}-{DivisionDraft.NeighborMax}")</span>, std: <span class="fw-bold">@Math.Round(DivisionDraft.NeighborStd, 2)</span></p>
            <p class="m-0">Games range: <span class="fw-bold">@($"{DivisionDraft.GameMin}-{DivisionDraft.GameMax}")</span>, std: <span class="fw-bold">@Math.Round(DivisionDraft.GameStd, 2)</span></p>
            <p class="m-0">Proximity range: <span class="fw-bold">@($"{Math.Round(DivisionDraft.ProximityMin, 2)}-{Math.Round(DivisionDraft.ProximityMax, 2)}")</span>, std: <span class="fw-bold">@Math.Round(DivisionDraft.ProximityStd, 2)</span></p>
        }

        @if (_areMessagesVisible)
        {
            <h4>Welcome messages</h4>
            <p>Subject: <b>@Subject</b></p>
            <dl>
                @foreach (var player in DivisionDraft.Draft)
                {
                    <dt class="text-start bg-dark-container border-0">
                        @player.Name
                    </dt>
                    <dd class="text-justify ms-3 fs-7 bg-dark-container-2">
                        @((MarkupString)Regex.Replace(HttpUtility.HtmlEncode(player.MessageBody), "\r?\n|\r", "<br />"))
                    </dd>
                }
            </dl>
        }

        <div class="row mt-4">
            <div class="col-4 pe-2">
                <button class="btn btn-primary w-100" @onclick="() => CopyTextToClipboard(Subject)">Copy subject</button>
            </div>
            <div class="col-4 pe-2">
                <button class="btn btn-primary w-100" @onclick="SwitchMessagesVisible">@(_areMessagesVisible ? "Hide messages" : "Show messages")</button>
            </div>
            <div class="col-4 ps-2">
                <button class="btn btn-primary w-100" @onclick="SwitchStatsVisible">@(_areStatsVisible ? "Hide stats" : "Show stats")</button>
            </div>
        </div>
    }
}

@if (DivisionForm == null)
{
    @if (_isInitialized)
    {
        <div class="lead mt-4">The league @LeagueId not found.</div>
    }
    else
    {
        <Loading></Loading>
    }
}
else
{
    <EditForm Model="@DivisionForm" OnSubmit="@HandleSubmit" class="text-start row mt-4">
        <div class="col-12 mb-4">
            <button type="submit" class="btn btn-primary w-100 @(DivisionDraft == null ? "d-none" : "")">Generate draft</button>
        </div>

        <div class="col-md-6">
            <div class="p-3 mb-3 bg-dark-container rounded-5 d-flex flex-column">
                <label for="season" class="form-label text-start">Season</label>
                <div id="seasonHelp" class="form-text">The number of Season for which you want to generate the draft.</div>
                <InputText id="season" @bind-Value="DivisionForm.Season" placeholder="6" class="form-control" aria-describedby="seasonHelp" />
            </div>
            <div class="p-3 mb-3 bg-dark-container rounded-5 d-flex flex-column">
                <label for="division" class="form-label text-start">Division</label>
                <div id="divisionHelp" class="form-text">The Division for which you want to generate the draft.</div>
                <InputText id="division" @bind-Value="DivisionForm.Division" placeholder="1" class="form-control" aria-describedby="divisionHelp" />
            </div>
            <div class="p-3 mb-3 bg-dark-container rounded-5 d-flex flex-column">
                <label for="password" class="form-label text-start">Password</label>
                <div id="passwordHelp" class="form-text">Come up with a fancy but simple password for all games of your Division.</div>
                <InputText id="password" @bind-Value="DivisionForm.Password" placeholder="Cersei" class="form-control" aria-describedby="passwordHelp" />
            </div>
            <div class="p-3 mb-3 bg-dark-container rounded-5 d-flex flex-column">
                <label for="contact" class="form-label text-start">Contact</label>
                <div id="contactHelp" class="form-text">Say which ManyFaced God to turn to in case you find yourself in a controversial situation. It would be part of generated message to the players so it can be something like: "me or Der Seynmaster".</div>
                <InputText id="contact" @bind-Value="DivisionForm.Contact" placeholder="me" class="form-control" aria-describedby="contactHelp" />
            </div>
            <div class="p-3 mb-3 bg-dark-container rounded-5 d-flex flex-column">
                <label for="judgeName" class="form-label text-start">Judge</label>
                <div id="judgeNameHelp" class="form-text">Introduce yourself with your nickname on Thronemaster.net.</div>
                <InputText id="judgeName" @bind-Value="DivisionForm.JudgeName" placeholder="TM name" class="form-control" aria-describedby="judgeNameHelp" />
            </div>
        </div>
        <div class="col-md-6">
            <div class="p-3 mb-3 bg-dark-container rounded-5 d-flex flex-column">
                <label for="season" class="form-label text-start">Players</label>
                <div id="playersHelp" class="form-text">
                    Please insert the <b>Thronemaster's names of players</b> from the <b>Division</b> for which you are the judge.
                </div>
                @foreach (var formPlayer in DivisionForm.Players)
                {
                    var player = formPlayer;
                    <div class="row mb-3">
                        <label class="col-1">@($"{formPlayer.Id}.")</label>
                        <div class="col-11">
                            <InputText id="@($"player{player.Id}")" @bind-Value="@player.Name" placeholder="TM name" class="form-control" aria-describedby="playersHelp" />
                        </div>
                    </div>
                }
                <div class="row mb-3">
                    <button type="button" class="btn btn-primary w-100" @onclick="AddPlayer">Add player</button>
                </div>
            </div>
        </div>
        <div class="col-12">
            <div class="p-3 mb-3 bg-dark-container rounded-5 d-flex flex-column">
                <label for="messageSubject" class="form-label text-start">Initial message subject</label>
                <div id="messageSubjectHelp" class="form-text">
                    Subject format of the initial message.
                </div>
                <InputText id="messageSubject" @bind-Value="DivisionForm.MessageSubject" placeholder="@($"{LeagueName}, S{{season}}, D{{division}}")" class="form-control" aria-describedby="messageSubjectHelp" />
            </div>
            <div class="p-3 mb-3 bg-dark-container rounded-5 d-flex flex-column">
                <label for="messageBody" class="form-label text-start">Initial message body</label>
                <div id="messageBodyHelp" class="form-text">
                    Body format of the initial message.
                </div>
                <InputTextArea id="messageBody" style="height: 400px;" @bind-Value="DivisionForm.MessageBody" placeholder="..." class="form-control" aria-describedby="messageBodyHelp" />
            </div>
        </div>
        <div class="col-12 row">
            <div class="col-md-6 p-3 mb-3 bg-dark-container rounded-5 d-flex flex-column">
                <label for="usePredefinedDraft" class="form-label text-start">Use random draft</label>
                <div class="d-flex align-items-center">
                    <InputCheckbox id="usePredefinedDraft" @bind-Value="DivisionForm.RandomOptions.UseRandomDraft" class="form-check-input me-2" aria-describedby="usePredefinedDraftHelp" />
                    <div id="usePredefinedDraftHelp" class="form-text m-0">
                        Use random draft even if predefined exists
                    </div>
                </div>
            </div>
            @if (DivisionForm.RandomOptions.UseRandomDraft)
            {
                <div class="col-md-6 p-3 mb-3 bg-dark-container rounded-5 d-flex flex-column">
                    <label for="timeout" class="form-label text-start">Timeout</label>
                    <div id="timeoutHelp" class="form-text">The time of generating best draft in format "HH:MM:SS". The page will not be responing during this time.</div>
                    <InputText id="timeout" @bind-Value="DivisionForm.RandomOptions.TimeoutRaw" class="form-control" aria-describedby="timeoutHelp" />
                </div>
            }
        </div>
        @if (DivisionForm.RandomOptions.UseRandomDraft)
        {
            <div class="col-12 row">
                <div class="col-md-2 p-3 mb-3 bg-dark-container rounded-5 d-flex flex-column">
                    <div class="row mx-0 mb-3">
                        Neighbor weight
                    </div>
                    <div class="row mb-3">
                        <label class="col-6">Min</label>
                        <div class="col-6">
                            <InputNumber id="neighborMin" @bind-Value="DivisionForm.RandomOptions.Weights.NeighborMin" class="form-control" aria-describedby="neighborMinHelp" />
                        </div>
                    </div>
                    <div class="row mb-3">
                        <label class="col-6">Max</label>
                        <div class="col-6">
                            <InputNumber id="neighborMax" @bind-Value="DivisionForm.RandomOptions.Weights.NeighborMax" class="form-control" aria-describedby="neighborMaxHelp" />
                        </div>
                    </div>
                    <div class="row mb-3">
                        <label class="col-6">Std</label>
                        <div class="col-6">
                            <InputNumber id="neighborStd" @bind-Value="DivisionForm.RandomOptions.Weights.NeighborStd" class="form-control" aria-describedby="neighborStdHelp" />
                        </div>
                    </div>
                </div>
                <div class="col-md-2 p-3 mb-3 bg-dark-container rounded-5 d-flex flex-column">
                    <div class="row mx-0 mb-3">
                        Common games weight
                    </div>
                    <div class="row mb-3">
                        <label class="col-6">Min</label>
                        <div class="col-6">
                            <InputNumber id="gameMin" @bind-Value="DivisionForm.RandomOptions.Weights.GameMin" class="form-control" aria-describedby="gameMinHelp" />
                        </div>
                    </div>
                    <div class="row mb-3">
                        <label class="col-6">Max</label>
                        <div class="col-6">
                            <InputNumber id="gameMax" @bind-Value="DivisionForm.RandomOptions.Weights.GameMax" class="form-control" aria-describedby="gameMaxHelp" />
                        </div>
                    </div>
                    <div class="row mb-3">
                        <label class="col-6">Std</label>
                        <div class="col-6">
                            <InputNumber id="gameStd" @bind-Value="DivisionForm.RandomOptions.Weights.GameStd" class="form-control" aria-describedby="gameStdHelp" />
                        </div>
                    </div>
                </div>
                <div class="col-md-2 p-3 mb-3 bg-dark-container rounded-5 d-flex flex-column">
                    <div class="row mx-0 mb-3">
                        Proximity weight
                    </div>
                    <div class="row mb-3">
                        <label class="col-6">Min</label>
                        <div class="col-6">
                            <InputNumber id="proximityMin" @bind-Value="DivisionForm.RandomOptions.Weights.ProximityMin" class="form-control" aria-describedby="proximityMinHelp" />
                        </div>
                    </div>
                    <div class="row mb-3">
                        <label class="col-6">Max</label>
                        <div class="col-6">
                            <InputNumber id="proximityMax" @bind-Value="DivisionForm.RandomOptions.Weights.ProximityMax" class="form-control" aria-describedby="proximityMaxHelp" />
                        </div>
                    </div>
                    <div class="row mb-3">
                        <label class="col-6">Std</label>
                        <div class="col-6">
                            <InputNumber id="proximityStd" @bind-Value="DivisionForm.RandomOptions.Weights.ProximityStd" class="form-control" aria-describedby="proximityStdHelp" />
                        </div>
                    </div>
                </div>
            </div>
        }

        <div class="col-12 my-4">
            <button type="submit" class="btn btn-primary w-100 @(DivisionDraft == null ? "" : "d-none")">Generate draft</button>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public string? LeagueId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "season")]
    public string? SeasonQuery { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "division")]
    public string? DivisionQuery { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "contact")]
    public string? ContactQuery { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "judgeName")]
    public string? JudgeNameQuery { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "password")]
    public string? PasswordQuery { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "specialNote")]
    public string? SpecialNoteQuery { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "player")]
    public string[] PlayersQuery { get; set; } = Array.Empty<string>();

    private string? LeagueName { get; set; }

    private DivisionForm? DivisionForm { get; set; }

    private DivisionDraft? DivisionDraft { get; set; }

    private string Subject => DivisionDraft?.Draft.FirstOrDefault()?.MessageSubject ?? $"{LeagueName} draft";

    private int TableWidth => 300 + (DivisionDraft?.Games ?? 0) * 100 + (_areStatsVisible ? 200 : 0);

    private bool _areMessagesVisible;
    private bool _areStatsVisible;

    private bool _isInitialized;
    private bool _isDraftLoading;

    protected override async Task OnInitializedAsync()
    {
        if (LeagueId != null)
        {
            var divisionSetup = await LeagueService.GetDivisionSetupVm(LeagueId);
            _isInitialized = true;
            if (divisionSetup == null)
                return;

            LeagueName = divisionSetup.Name;
            DivisionForm = new DivisionForm
                {
                    League = LeagueId,
                    Season = SeasonQuery ?? divisionSetup.NextMainSeason,
                    Division = DivisionQuery ?? "1",
                    Contact = ContactQuery ?? "me",
                    JudgeName = JudgeNameQuery ?? string.Empty,
                    Password = PasswordQuery ?? string.Empty,
                    Players = GetPlayers(),
                    MessageSubject = divisionSetup?.InitialMessageSubject ?? string.Empty,
                    MessageBody = divisionSetup?.InitialMessageBody ?? string.Empty
                };
        }
    }

    private List<DivisionFormPlayer> GetPlayers()
    {
        var players = PlayersQuery
            .Select((s, i) => new DivisionFormPlayer(i + 1) { Name = s }).ToList();
        while (players.Count < 10)
            players.Add(new DivisionFormPlayer(players.Count + 1));
        return players;
    }

    private async Task HandleSubmit(EditContext context)
    {
        _areMessagesVisible = false;

        if (DivisionForm != null)
        {
            _isDraftLoading = true;
            DivisionDraft = await LeagueService.GetBestDraft(DivisionForm);
            _isDraftLoading = false;
        }

        await JsRuntime.InvokeVoidAsync("scrollToTop");
    }

    private async Task CopyTextToClipboard(string data)
    {
        await JsRuntime.InvokeVoidAsync("copyClipboard", data);
    }

    private void SwitchMessagesVisible() => _areMessagesVisible = !_areMessagesVisible;

    private void SwitchStatsVisible() => _areStatsVisible = !_areStatsVisible;

    private void AddPlayer() => DivisionForm?.Players.Add(new DivisionFormPlayer(DivisionForm.Players.Count + 1));

}