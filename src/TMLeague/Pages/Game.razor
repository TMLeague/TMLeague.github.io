@page "/league/{leagueId}/game/{gameId}"
@page "/game/{gameId}"
@inject GameService GameService
@if (GameVm == null)
{
    <h3>Game @GameId</h3>
}
else
{
    @if (GameIdInt != null)
    {
        <h3>
            <a href="@ThroneMasterUriProvider.GetGameUri(GameIdInt.Value)" class="text-inherit" target="_blank">
                Game @GameVm.Name
            </a>
        </h3>
    }
    else
    {
        <h3>Game @GameVm.Name</h3>
    }

    <div class="row">
        <div class="col-12">
            <GameProgress Class="mb-1 w-100"
                          Name="@GameVm.Name" IsStalling="@GameVm.IsStalling" IsFinished="@GameVm.IsFinished" IsCreatedManually="@GameVm.IsCreatedManually"
                          Turn="@GameVm.Turn" Progress="@GameVm.Progress" LastActionTime="@GameVm.LastActionTime" />
        </div>

        @if (GameVm.IsWarning && GameVm.LastActionTime.HasValue)
        {
            <div class="col-12">
                Last action: @GameVm.LastActionTime.Value.LocalDateTime.ToString("d MMMM yyyy HH:mm")
            </div>
        }
    </div>
}

<div class="row">
    @if (GameVm == null)
    {
        @if (_isInitialized)
        {
            @if (GameIdInt is null or < 0)
            {
                <div class="lead">Game ID @GameIdInt is not valid.</div>
            }
            else
            {
                <div class="lead">Game @GameIdInt not exists in the application.</div>
            }
        }
        else
        {
            <Loading></Loading>
        }
    }
    else
    {
        <div class="row">
            <table class="table table-striped table-dark pb-0" width="800px">
                <thead>
                    <tr class="align-middle">
                        <th scope="col" style="width: 200px" rowspan="2">Player</th>
                        <th scope="col" style="width: 50px" rowspan="2">Castles</th>
                        <th scope="col" style="width: 50px" rowspan="2">CLA</th>
                        <th scope="col" style="width: 50px" rowspan="2">Supply</th>
                        <th scope="col" style="width: 60px" colspan="3">Tracks</th>
                        <th scope="col" style="width: 50px" rowspan="2">MPM</th>
                        <th scope="col" style="width: 0" class="p-1 invisible border-0" rowspan="2"></th>
                        <th scope="col" style="width: 50px" rowspan="2">Battles</th>
                        <th scope="col" style="width: 50px" rowspan="2">Kills<i>*</i></th>
                        <th scope="col" style="width: 50px" rowspan="2">Casualties<i>*</i></th>
                        <th scope="col" style="width: 50px" class="tt" colspan="2" ontouchstart="">
                            PT
                            <div class="px-3 tt-inner">Power Tokens</div>
                        </th>
                    </tr>
                    <tr class="align-middle">
                        <th scope="col" style="width: 20px" class="tt" ontouchstart="">
                            IT
                            <div class="px-3 tt-inner">Iron Throne track position</div>
                        </th>
                        <th scope="col" style="width: 20px" class="tt" ontouchstart="">
                            F
                            <div class="px-3 tt-inner">Fiefdoms track position</div>
                        </th>
                        <th scope="col" style="width: 20px" class="tt" ontouchstart="">
                            KC
                            <div class="px-3 tt-inner">King's court track position</div>
                        </th>
                        <th scope="col" style="width: 20px" class="tt" ontouchstart="">
                            +
                            <div class="px-3 tt-inner">Gathered</div>
                        </th>
                        <th scope="col" style="width: 20px" class="tt" ontouchstart="">
                            -
                            <div class="px-3 tt-inner">Spent</div>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var houseScore in GameVm.Houses)
                    {
                        <tr class="align-middle">
                            <th scope="row">
                                @if (!string.IsNullOrEmpty(houseScore.Player))
                                {
                                    <p class="m-0">
                                        <a href="@RouteProvider.GetPlayerRoute(LeagueId, houseScore.Player)" class="text-inherit">@houseScore.Player</a>
                                    </p>
                                }
                                <p class="m-0 fw-light fst-italic">@houseScore.House</p>
                            </th>
                            <td class="tt" ontouchstart="">
                                @(houseScore.Castles + houseScore.Strongholds)
                                <div class="tt-inner">
                                    <ul class="list-group list-group-flush text-bg-dark">
                                        <li class="list-group-item text-bg-dark">Strongholds: @houseScore.Strongholds</li>
                                        <li class="list-group-item text-bg-dark">Castles: @houseScore.Castles</li>
                                    </ul>
                                </div>
                            </td>
                            <td>@houseScore.Cla</td>
                            <td>@houseScore.Supplies</td>
                            <td>@houseScore.Throne</td>
                            <td>@houseScore.Fiefdoms</td>
                            <td>@houseScore.KingsCourt</td>
                            <td>@Math.Round(houseScore.MinutesPerMove)</td>
                            <td class="p-1 invisible border-0"></td>
                            <td class="tt" ontouchstart="">
                                <BattleStats Stats="@houseScore.Stats.Battles"></BattleStats>
                            </td>
                            <td class="tt" ontouchstart="">
                                <UnitStats Stats="@houseScore.Stats.Kills"></UnitStats>
                            </td>
                            <td class="tt" ontouchstart="">
                                <UnitStats Stats="@houseScore.Stats.Casualties"></UnitStats>
                            </td>
                            <td class="tt" ontouchstart="">
                                <PowerTokenStats Stats="@houseScore.Stats.PowerTokens"></PowerTokenStats>
                            </td>
                            <td class="tt" ontouchstart="">
                                <BidStats Stats="@houseScore.Stats.Bids"></BidStats>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        @if (GameVm.Westeros != null && !GameVm.IsFinished)
        {
            <div class="row">
                <h4>Westeros cards for turn @(GameVm.Westeros.Turn + 1)</h4>
            </div>
            <div class="row">
                <div class="col-sm-6 col-lg-3">
                    <h5>Phase I</h5>
                    @foreach (var (card, value) in GameVm.Westeros.Phase1)
                    {
                        <div class="alert alert-info @(card == WesterosPhase1.WinterIsComing ? "alert-info-opacity-75" : "") row m-1 p-0">
                            <div class="col-9">@Cards.WesterosPhase1[card].Name</div>
                            <div class="col-3">@($"{Math.Round(value * 100)}%")</div>
                        </div>
                    }
                </div>
                <div class="col-sm-6 col-lg-3">
                    <h5>Phase II</h5>
                    @foreach (var (card, value) in GameVm.Westeros.Phase2)
                    {
                        <div class="alert alert-info @(card == WesterosPhase2.WinterIsComing ? "alert-info-opacity-75" : "") row m-1 p-0">
                            <div class="col-9">@Cards.WesterosPhase2[card].Name</div>
                            <div class="col-3">@($"{Math.Round(value * 100)}%")</div>
                        </div>
                    }
                </div>
                <div class="col-sm-6 col-lg-3">
                    <h5>Phase III</h5>
                    @foreach (var (card, value) in GameVm.Westeros.Phase3)
                    {
                        <div class="alert alert-info @(value > 0 ? "" : "alert-info-opacity-50")  row m-1 p-0">
                            <div class="col-9">@Cards.WesterosPhase3[card].Name</div>
                            <div class="col-3">@($"{Math.Round(value * 100)}%")</div>
                        </div>
                    }
                </div>
                <div class="col-sm-6 col-lg-3">
                    <h5>Wildlings</h5>
                    @if (GameVm.Houses.All(score => score.KnowsNextWildlings != null))
                    {
                        <div class="row m-1 p-0">
                            @foreach (var house in GameVm.Houses.OrderBy(score => score.House))
                            {
                                <div class="col-2 alert @GetHouseClass(house) tt tt-down m-0 p-0" ontouchstart="">
                                    <div class="overflow-hidden fs-8">
                                        <div>@house.House</div>
                                        <div>@($"{Math.Round(100 * house.KnowsNextWildlings ?? 0)}%")</div>
                                    </div>
                                    <div class="tt-inner text-primary px-3">
                                        @(house.KnowsNextWildlings >= 0.99 ? $"{house.House} knows things" : $"{house.House} has {Math.Round(100 * house.KnowsNextWildlings ?? 0)}% chance of guessing the next wildling card.")
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    @foreach (var (card, value) in GameVm.Westeros.Wildlings)
                    {
                        <div class="alert alert-info @(value ? "tt tt-down" : "alert-info-opacity-50") row m-1 p-0" ontouchstart="">
                            <div class="col-12">@Cards.Wildlings[card].Name</div>
                            @if (value)
                            {
                                <div class="tt-inner px-3" style="width:800px">@((MarkupString)Cards.Wildlings[card].Description)</div>
                            }
                        </div>
                    }
                </div>
            </div>
        }
    }
</div>

<footer class="text-white-50 d-block">
    @if (GameVm?.GeneratedTime != null)
    {
        <p class="mb-0">Data fetched at @GameVm.GeneratedTime.LocalDateTime.ToString("yyyy-MM-dd HH:mm")</p>
    }
    <p><small><i>* Calculated statistical data like killed and lost units can be approximate. It's impossible to correctly calculate situations like loosing ship by the attacker by leaving an area with port empty or using Mace Tyrell in some cases from logs.</i></small></p>
</footer>

@code {
    [Parameter]
    public string? LeagueId { get; set; }

    [Parameter]
    public string? GameId { get; set; }
    private int? GameIdInt => GameId == null ?
        null :
        int.TryParse(GameId, out var gameId) ?
            gameId :
            null;

    private GameViewModel? GameVm { get; set; }

    private bool _isInitialized;

    protected override async Task OnInitializedAsync()
    {
        if (GameIdInt == null)
        {
            _isInitialized = true;
            return;
        }

        GameVm = await GameService.GetGameVm(GameIdInt.Value);

        _isInitialized = true;
    }

    private static string GetHouseClass(HouseScore house) => $"house-{house.House.ToString().ToLower()}{(house.KnowsNextWildlings >= 0.99 ? "" : "-opacity-25")}";
}