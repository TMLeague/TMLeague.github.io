@page "/league/{leagueId}/season/{seasonId}/division/{divisionId}"
@page "/league/{leagueId}/season/{seasonId}/division/{divisionId}/{interactionsId}"
@inject DivisionService DivisionService
@inject NavigationManager NavManager

<h3>@(DivisionVm?.LeagueName ?? $"League {LeagueId}")</h3>
<h4>
    @if (DivisionVm?.SeasonNavigation.Previous == null)
    {
        <i class="bi bi-chevron-left invisible"></i>
    }
    @if (LeagueId != null && DivisionId != null && DivisionVm?.SeasonNavigation.First != null)
    {
        <a class="text-inherit" href="@RouteProvider.GetLeagueDivisionRoute(LeagueId, DivisionVm.SeasonNavigation.First, DivisionId, InteractionsType)"><i class="bi bi-chevron-double-left"></i></a>
    }
    else
    {
        <i class="bi bi-chevron-double-left invisible"></i>
    }
    @if (LeagueId != null && DivisionId != null && DivisionVm?.SeasonNavigation.Previous != null)
    {
        <a class="text-inherit" href="@RouteProvider.GetLeagueDivisionRoute(LeagueId, DivisionVm.SeasonNavigation.Previous, DivisionId, InteractionsType)"><i class="bi bi-chevron-left"></i></a>
    }
    @if (LeagueId != null && SeasonId != null)
    {
        <a class="text-inherit" href="@RouteProvider.GetLeagueSeasonRoute(LeagueId, SeasonId)">@(DivisionVm?.SeasonName ?? $"Season {SeasonId}")</a>
    }
    else
    {
        <span>@(DivisionVm?.SeasonName ?? $"Season {SeasonId}")</span>
    }
    @if (LeagueId != null && DivisionId != null && DivisionVm?.SeasonNavigation.Next != null)
    {
        <a class="text-inherit" href="@RouteProvider.GetLeagueDivisionRoute(LeagueId, DivisionVm.SeasonNavigation.Next, DivisionId, InteractionsType)"><i class="bi bi-chevron-right"></i></a>
    }
    @if (LeagueId != null && DivisionId != null && DivisionVm?.SeasonNavigation.Last != null)
    {
        <a class="text-inherit" href="@RouteProvider.GetLeagueDivisionRoute(LeagueId, DivisionVm.SeasonNavigation.Last, DivisionId, InteractionsType)"><i class="bi bi-chevron-double-right"></i></a>
    }
    else
    {
        <i class="bi bi-chevron-double-right invisible"></i>
    }
    @if (DivisionVm?.SeasonNavigation.Next == null)
    {
        <i class="bi bi-chevron-right invisible"></i>
    }
</h4>
<h5>
    @if (DivisionVm?.DivisionNavigation.Previous == null)
    {
        <i class="bi bi-chevron-left invisible"></i>
    }
    @if (LeagueId != null && SeasonId != null && DivisionVm?.DivisionNavigation.First != null)
    {
        <a class="text-inherit" href="@RouteProvider.GetLeagueDivisionRoute(LeagueId, SeasonId, DivisionVm.DivisionNavigation.First, InteractionsType)"><i class="bi bi-chevron-double-left"></i></a>
    }
    else
    {
        <i class="bi bi-chevron-double-left invisible"></i>
    }
    @if (LeagueId != null && SeasonId != null && DivisionVm?.DivisionNavigation.Previous != null)
    {
        <a class="text-inherit" href="@RouteProvider.GetLeagueDivisionRoute(LeagueId, SeasonId, DivisionVm.DivisionNavigation.Previous, InteractionsType)"><i class="bi bi-chevron-left"></i></a>
    }
    <span>@(DivisionVm?.DivisionName ?? $"Division {DivisionId}")</span>
    @if (LeagueId != null && SeasonId != null && DivisionVm?.DivisionNavigation.Next != null)
    {
        <a class="text-inherit" href="@RouteProvider.GetLeagueDivisionRoute(LeagueId, SeasonId, DivisionVm.DivisionNavigation.Next, InteractionsType)"><i class="bi bi-chevron-right"></i></a>
    }
    @if (LeagueId != null && SeasonId != null && DivisionVm?.DivisionNavigation.Last != null)
    {
        <a class="text-inherit" href="@RouteProvider.GetLeagueDivisionRoute(LeagueId, SeasonId, DivisionVm.DivisionNavigation.Last, InteractionsType)"><i class="bi bi-chevron-double-right"></i></a>
    }
    else
    {
        <i class="bi bi-chevron-double-right invisible"></i>
    }
    @if (DivisionVm?.DivisionNavigation.Next == null)
    {
        <i class="bi bi-chevron-right invisible"></i>
    }
</h5>

@if (DivisionVm == null)
{
    <div class="row">
        @if (_isInitialized)
        {
            <div class="lead">That division not exists.</div>
        }
        else
        {
            <Loading />
        }
    </div>
}
else
{
    @if (LeagueId != null && SeasonId != null && DivisionId != null && IsFiltered)
    {
        <div class="row my-2">
            <div class="col-4 p-0 pe-1">
                <InputSelect id="player-filter" @bind-Value="@AddFilteredPlayer" class="form-select" aria-describedby="penaltiesHelp">
                    @foreach (var player in DivisionVm.Players
            .Where(player => !PlayersFilter.Contains(player.Name))
            .Select(player => player.Name))
                    {
                        <option value="@player">@player</option>
                    }
                </InputSelect>
            </div>
            <div class="col-4 p-0 pe-1">
                @if (!string.IsNullOrEmpty(AddFilteredPlayer))
                {
                    <a class="btn btn-primary w-100" href="@RouteProvider.GetLeagueDivisionRoute(LeagueId, SeasonId, DivisionId, InteractionsType, Query + (Query.EndsWith("?") ? "" : "&") + $"p={AddFilteredPlayer}")">
                        Add to filter
                    </a>
                }
            </div>
            <div class="col-4 p-0">
                <a class="btn btn-primary w-100" href="@RouteProvider.GetLeagueDivisionRoute(LeagueId, SeasonId, DivisionId, InteractionsType)">
                    Clear filter
                </a>
            </div>
        </div>
    }
    <div class="row">
        <table class="table table-striped table-dark pb-0">
            <thead>
                <tr>
                    <th scope="col" style="width: 200px">Player</th>
                    <th scope="col" style="width: 100px">Points</th>
                    @foreach (var tiebreaker in DivisionVm.Tiebreakers)
                    {
                        <th scope="col" style="width: 100px">@tiebreaker.Name()</th>
                    }
                    @if (!DivisionVm.Tiebreakers.Contains(Tiebreaker.Penalties))
                    {
                        <th scope="col" style="width: 100px">Penalties</th>
                    }
                    <th scope="col" style="width: 0" class="p-1 invisible border-0 "></th>
                    <th scope="col" style="width: 100px" class="py-0"><Baratheon /></th>
                    <th scope="col" style="width: 100px" class="py-0"><Lannister /></th>
                    <th scope="col" style="width: 100px" class="py-0"><Stark /></th>
                    <th scope="col" style="width: 100px" class="py-0"><Tyrell /></th>
                    <th scope="col" style="width: 100px" class="py-0"><Greyjoy /></th>
                    <th scope="col" style="width: 100px" class="py-0"><Martell /></th>
                    <th scope="col" style="width: 0" class="p-1 invisible border-0 "></th>
                    <th scope="col" style="width: 100px" class="">Battles</th>
                    <th scope="col" style="width: 100px" class="">Kills<i>*</i></th>
                    <th scope="col" style="width: 100px" class="">Casualties<i>*</i></th>
                    <th scope="col" style="width: 100px" class="">PT+</th>
                    <th scope="col" style="width: 100px" class="">PT-</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var (playerVm, i) in DivisionVm.Players
               .Where(player => PlayersFilter.Length == 0 || PlayersFilter.Contains(player.Name))
               .Select((player, i) => (player, i)))
                {
                    <tr>
                        <th scope="row" class="@GetPlayerClass(playerVm, i)">
                            <a href="@RouteProvider.GetPlayerRoute(LeagueId, playerVm.Name)" class="text-inherit">@playerVm.Name</a>
                        </th>
                        <td class="text-warning">@playerVm.TotalPoints</td>
                        @foreach (var tiebreaker in DivisionVm.Tiebreakers)
                        {
                            switch (tiebreaker)
                            {
                                case Tiebreaker.Wins:
                                    <td>@playerVm.Wins</td>
                                    break;
                                case Tiebreaker.Penalties:
                                    <td class="tt" ontouchstart="">
                                        <PenaltiesCell LeagueId="@LeagueId" SeasonId="@SeasonId" DivisionId="@DivisionId" PlayerVm="@playerVm" />
                                    </td>
                                    break;
                                case Tiebreaker.Cla:
                                    <td>@playerVm.Cla</td>
                                    break;
                                case Tiebreaker.Supplies:
                                    <td>@playerVm.Supplies</td>
                                    break;
                                case Tiebreaker.PowerTokens:
                                    <td>@playerVm.PowerTokens</td>
                                    break;
                                case Tiebreaker.MinutesPerMove:
                                    <td>@Math.Round(playerVm.MinutesPerMove)</td>
                                    break;
                                default:
                                    throw new ArgumentOutOfRangeException();
                            }
                        }
                        @if (!DivisionVm.Tiebreakers.Contains(Tiebreaker.Penalties))
                        {
                            <td class="tt" ontouchstart="">
                                <PenaltiesCell LeagueId="@LeagueId" SeasonId="@SeasonId" DivisionId="@DivisionId" PlayerVm="@playerVm" />
                            </td>
                        }
                        <td class="p-1 invisible border-0"></td>
                        <td class="tt" ontouchstart="">
                            <HouseCell LeagueId="@LeagueId" SeasonId="@SeasonId" DivisionId="@DivisionId" HouseVm="@playerVm.GetHouse(House.Baratheon)" />
                        </td>
                        <td class="tt" ontouchstart="">
                            <HouseCell LeagueId="@LeagueId" SeasonId="@SeasonId" DivisionId="@DivisionId" HouseVm="@playerVm.GetHouse(House.Lannister)" />
                        </td>
                        <td class="tt" ontouchstart="">
                            <HouseCell LeagueId="@LeagueId" SeasonId="@SeasonId" DivisionId="@DivisionId" HouseVm="@playerVm.GetHouse(House.Stark)" />
                        </td>
                        <td class="tt" ontouchstart="">
                            <HouseCell LeagueId="@LeagueId" SeasonId="@SeasonId" DivisionId="@DivisionId" HouseVm="@playerVm.GetHouse(House.Tyrell)" />
                        </td>
                        <td class="tt" ontouchstart="">
                            <HouseCell LeagueId="@LeagueId" SeasonId="@SeasonId" DivisionId="@DivisionId" HouseVm="@playerVm.GetHouse(House.Greyjoy)" />
                        </td>
                        <td class="tt" ontouchstart="">
                            <HouseCell LeagueId="@LeagueId" SeasonId="@SeasonId" DivisionId="@DivisionId" HouseVm="@playerVm.GetHouse(House.Martell)" />
                        </td>
                        <td class="p-1 invisible border-0"></td>
                        <td class="tt" ontouchstart="">
                            <BattleStats Stats="@playerVm.Stats.Battles" />
                        </td>
                        <td class="tt" ontouchstart="">
                            <UnitStats Stats="@playerVm.Stats.Kills" />
                        </td>
                        <td class="tt" ontouchstart="">
                            <UnitStats Stats="@playerVm.Stats.Casualties" />
                        </td>
                        <td class="tt" ontouchstart="">
                            <PowerTokenStats Stats="@playerVm.Stats.PowerTokens" />
                        </td>
                        <td class="tt" ontouchstart="">
                            <BidStats Stats="@playerVm.Stats.Bids" />
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="row">
        <table class="table table-dark table-draft align-middle pb-0" width="@(TableWidth)px">
            <thead>
                <tr>
                    <th scope="col" style="width: 200px">Player</th>
                    @foreach (var (game, i) in DivisionVm.Games.Select((gameId, i) => (gameId, i)))
                    {
                        <th scope="col" style="width: 200px">
                            @if (game == null)
                            {
                                <span>@($"G{i + 1}")</span>
                            }
                            else
                            {
                                <a href="@RouteProvider.GetGameRoute(LeagueId, game.Id)" class="text-inherit">@($"G{i + 1}")</a>
                            }
                        </th>
                    }
                </tr>
            </thead>
            <tbody>
                <tr>
                    <th scope="row"></th>
                    @foreach (var (game, i) in DivisionVm.Games.Select((gameId, i) => (gameId, i)))
                    {
                        <td>
                            @if (game == null)
                            {
                                <span></span>
                            }
                            else
                            {
                                @if (game.IsFinished)
                                {
                                    <div class="progress" title="@($"Game {(game.IsCreatedManually ? "simulated" : "finished")} in turn {game.Turn}")">
                                        <div class="progress-bar overflow-visible bg-success @(game.IsCreatedManually ? "progress-bar-striped" : "")"
                                             role="progressbar" aria-valuenow="100"
                                             aria-valuemin="0" aria-valuemax="100" style="width: 100%">
                                            Finished
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="progress" title="@(string.IsNullOrEmpty(game.Name) ? "Game unavailable" : $"Turn {game.Turn}")">
                                        <div class="progress-bar overflow-visible progress-bar-striped progress-bar-animated @(game.IsStalling ? "bg-success" : "bg-warning text-dark")"
                                             role="progressbar" aria-valuenow="@((int)game.Progress)"
                                             aria-valuemin="0" aria-valuemax="100" style="@($"width: {(int)game.Progress}%")">
                                            @(game.IsStalling ? "Stalling" : $"T{game.Turn}")
                                        </div>
                                    </div>
                                }
                            }
                        </td>
                    }
                </tr>
                @foreach (var playerVm in DivisionVm.Players.Where(player => PlayersFilter.Length == 0 || PlayersFilter.Contains(player.Name)))
                {
                    <tr>
                        <th scope="row">
                            <a href="@RouteProvider.GetPlayerRoute(LeagueId, playerVm.Name)" class="text-inherit">@playerVm.Name</a>
                        </th>
                        @foreach (var (game, i) in DivisionVm.Games.Select((gameId, i) => (gameId, i)))
                        {
                            var playerHouse = playerVm.Houses.FirstOrDefault(model => model.Game == game?.Id);
                            @if (playerHouse == null)
                            {
                                <td></td>
                            }
                            else
                            {
                                <td class="@($"house-{playerHouse.House.ToString().ToLower()} {(playerHouse.IsWinner ? "progress-bar-striped" : "")}") tt" ontouchstart="">
                                    <HouseCell LeagueId="@LeagueId" SeasonId="@SeasonId" DivisionId="@DivisionId" HouseVm="@playerHouse" IsWinnerHighlighted="false" />
                                </td>
                            }
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="row">
        @if (LeagueId != null && SeasonId != null && DivisionId != null)
        {
            <div class="d-flex flex-column">
                <div class="d-flex flex-row my-1">
                    <div class="btn-group">
                        @foreach (var type in TMModels.Interactions.All)
                        {
                            <a class="btn btn-primary @(InteractionsType == type ? "active" : "")" href="@RouteProvider.GetLeagueDivisionRoute(LeagueId, SeasonId, DivisionId, type, Query)" disabled=@(InteractionsType == type)>
                                @type
                            </a>
                        }
                    </div>
                </div>
            </div>
        }
        @if (Interactions != null)
        {
            @if (InteractionsType == InteractionsType.Interactions)
            {
                <PlayersInteractionsTable LeagueId="@LeagueId"
                                          PlayersVm="@Interactions.Players.OrderBy(pair => Array.FindIndex(DivisionVm.Players, model => model.Name == pair.Key)).ToArray()"
                                          PlayersFilter="@PlayersFilter" />
            }
            else if (InteractionsType == InteractionsType.Attacks)
            {
                <PlayersAttacksTable LeagueId="@LeagueId"
                                     PlayersVm="@Interactions.Players.OrderBy(pair => Array.FindIndex(DivisionVm.Players, model => model.Name == pair.Key)).ToArray()"
                                     PlayersFilter="@PlayersFilter" />
            }
        }
    </div>

    @if (DivisionVm.Messages.Length != 0)
    {
        <div class="row my-2">
            @foreach (var message in DivisionVm.Messages)
            {
                <div class="alert @GetAlertClass(message) p-1 mb-1" role="alert">@((MarkupString)message.Message)</div>
            }
        </div>
    }

    @if (LeagueId != null && SeasonId != null && DivisionId != null)
    {
        <div class="row my-2">
            <div class="d-flex p-0">
                @if (DivisionVm.Games.All(model => model?.Id == null))
                {
                    <div class="flex-fill p-1">
                        <a href="@LeagueJudgeRoute" class="btn btn-primary w-100 text-inherit">Generate draft</a>
                    </div>
                }

                @if (!DivisionVm.IsFinished)
                {
                    <div class="flex-fill p-1">
                        <a href="@RouteProvider.GetLeagueDivisionConfigurationRoute(LeagueId, SeasonId, DivisionId)" class="btn btn-primary w-100 text-inherit">Configure</a>
                    </div>
                    <div class="flex-fill p-1">
                        <a href="@RouteProvider.GetLeagueDivisionFinishingRoute(LeagueId, SeasonId, DivisionId)" class="btn btn-primary w-100 text-inherit">Add penalties</a>
                    </div>
                }

                @if (!IsFiltered)
                {
                    <div class="flex-fill p-1">
                        <a class="btn btn-primary w-100 text-inherit" href="@RouteProvider.GetLeagueDivisionRoute(LeagueId, SeasonId, DivisionId, InteractionsType, "?")">Filter players</a>
                    </div>
                }
            </div>
        </div>
    }

}

<footer class="text-white-50 d-block">
    @if (DivisionVm?.Judge != null)
    {
        <p class="mb-0">Division @DivisionVm.JudgeTitle: <MessageLink PlayerName="@DivisionVm?.Judge" />.</p>
    }
    @if (DivisionVm?.GeneratedTime != null)
    {
        <p class="mb-0">Data fetched at @DivisionVm.GeneratedTime.Value.LocalDateTime.ToString("yyyy-MM-dd hh:mm tt")</p>
    }
    <p><small><i>* Calculated statistical data like killed and lost units can be approximate. It's impossible to correctly calculate situations like loosing ship by the attacker by leaving an area with port empty or using Mace Tyrell in some cases from logs.</i></small></p>
</footer>

@code {
    [Parameter]
    public string? LeagueId { get; set; }

    [Parameter]
    public string? SeasonId { get; set; }

    [Parameter]
    public string? DivisionId { get; set; }

    [Parameter]
    public string? InteractionsId { get; set; }
    private InteractionsType InteractionsType => Enum.TryParse<InteractionsType>(InteractionsId ?? "", true, out var interactionsType) ? interactionsType : InteractionsType.None;

    [SupplyParameterFromQuery(Name = "P")]
    public string[] PlayersFilter { get; set; } = [];

    private DivisionViewModel? DivisionVm { get; set; }

    private TotalInteractions? Interactions { get; set; }

    private string? AddFilteredPlayer { get; set; }

    private int TableWidth => DivisionVm == null ?
        0 :
        900 +
        DivisionVm.Tiebreakers.Length * 100 +
        (DivisionVm.Tiebreakers.Contains(Tiebreaker.Penalties) ? 0 : 100);

    private bool _isInitialized;

    private string Query => NavManager.ToAbsoluteUri(NavManager.Uri).Query;
    private bool IsFiltered => !string.IsNullOrEmpty(Query);

    protected override async Task OnParametersSetAsync()
    {
        if (LeagueId == null || SeasonId == null || DivisionId == null)
            return;

        DivisionVm = await DivisionService.GetDivisionVm(LeagueId, SeasonId, DivisionId);
        AddFilteredPlayer = DivisionVm?.Players.FirstOrDefault(player => !PlayersFilter.Contains(player.Name))?.Name;

        Interactions = InteractionsType == InteractionsType.None ? null : await DivisionService.GetDivisionInteractions(LeagueId, SeasonId, DivisionId);

        await base.OnParametersSetAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        if (LeagueId == null || SeasonId == null || DivisionId == null)
            return;

        DivisionVm = await DivisionService.GetDivisionVm(LeagueId, SeasonId, DivisionId);
        AddFilteredPlayer = DivisionVm?.Players.FirstOrDefault(player => !PlayersFilter.Contains(player.Name))?.Name;

        Interactions = InteractionsType == InteractionsType.None ? null : await DivisionService.GetDivisionInteractions(LeagueId, SeasonId, DivisionId);

        _isInitialized = true;
    }

    private static string GetAlertClass(NotificationMessage message) => message.Level switch
    {
        NotificationLevel.Info => message.IsStallingOrFinished ? "alert-info alert-info-opacity-75" : "alert-info",
        NotificationLevel.Warning => message.IsStallingOrFinished ? "alert-warning alert-warning-opacity-75" : "alert-warning",
        NotificationLevel.Critical => message.IsStallingOrFinished ? "alert-danger alert-danger-opacity-75" : "alert-danger",
        _ => message.IsStallingOrFinished ? "alert-light alert-light-opacity-75" : "alert-light"
    };

    private static string GetPlayerClass(DivisionPlayerViewModel playerVm, int i)
    {
        if (playerVm.IsPromoted) return "promoted";
        if (playerVm.IsRelegated) return "relegated";
        if (i == 0) return "winner";

        return string.Empty;
    }

    private string LeagueJudgeRoute => DivisionVm != null && LeagueId != null
        ? RouteProvider.GetLeagueJudgeRoute(LeagueId)
            + "?season=" + (SeasonId != null && SeasonId.StartsWith("s", StringComparison.InvariantCultureIgnoreCase) ? SeasonId[1..] : SeasonId)
            + "&division=" + (DivisionId != null && DivisionId.StartsWith("d", StringComparison.InvariantCultureIgnoreCase) ? DivisionId[1..] : DivisionId)
            + "&judgeName=" + DivisionVm.Judge
            + string.Join("", DivisionVm.Players.Select(model => $"&player={model.Name}"))
        : "";

}