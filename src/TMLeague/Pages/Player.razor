@page "/league/{leagueId}/player/{playerName}/{tableTypeId}/{houseId}"
@page "/league/{leagueId}/player/{playerName}/{tableTypeId}"
@page "/player/{playerName}/{tableTypeId}/{houseId}"
@page "/player/{playerName}/{tableTypeId}"
@inject PlayerService PlayerService
<h3>
    <PlayerLink PlayerName="@PlayerName"></PlayerLink>
</h3>

<div class="row">
    @if (PlayerVm == null)
    {
        @if (_isInitialized)
        {
            @if (string.IsNullOrEmpty(PlayerName))
            {
                <div class="lead">Player name @PlayerName is not valid.</div>
            }
            else
            {
                <div class="lead">Player @PlayerName not exists for league @LeagueId.</div>
            }
        }
        else
        {
            <Loading />
        }
    }
    else
    {
        <div class="d-flex flex-column">
            <div class="d-flex flex-row my-1">
                <div class="btn-group">
                    @foreach (var type in PlayerTableTypes.All)
                    {
                        <a class="btn btn-primary @(TableType == type ? "active" : "")" href="@(type == PlayerTableType.Games ?
                            RouteProvider.GetPlayerRoute(LeagueId, PlayerVm.Name, type, HouseType) : RouteProvider.GetPlayerRoute(LeagueId, PlayerVm.Name, type))" disabled=@(TableType == type)>
                            @type
                        </a>
                    }
                </div>
            </div>
            @if (TableType == PlayerTableType.Games)
            {
                <div class="d-flex flex-row my-1">
                    <div class="btn-group">
                        @{
                            var playerHouses = PlayerLeagueVm == null ?
                                PlayerVm.Leagues.SelectMany(league => league.Seasons).SelectMany(season => season.Houses).Distinct() :
                                PlayerLeagueVm.Seasons.SelectMany(season => season.Houses).Distinct();
                        }
                        @foreach (var type in Houses.All.Where(house => playerHouses.Any(playerHouse => playerHouse.House == house)))
                        {
                            <a class="btn btn-primary @(HouseType == type ? "active" : "")" href="@RouteProvider.GetPlayerRoute(LeagueId, PlayerVm.Name, TableType, type)" disabled=@(HouseType == type)>
                                <HouseImg House="@type" />
                            </a>
                        }
                    </div>
                </div>
            }
        </div>

        @if (LeagueId == null || PlayerLeagueVm == null)
        {
            @foreach (var playerLeagueVm in PlayerVm.Leagues)
            {
                <h4>
                    <a href="@RouteProvider.GetLeagueIndexRoute(playerLeagueVm.LeagueId)" class="text-inherit">@playerLeagueVm.LeagueName</a>
                </h4>

                @if (TableType != PlayerTableType.Interactions)
                {
                    <LeaguePlayer LeagueId="@playerLeagueVm.LeagueId" PlayerVm="@playerLeagueVm" TableType="@TableType" HouseType="@HouseType" />
                }
                else if (Interactions?.TryGetValue(playerLeagueVm.LeagueId, out var interactions) ?? false)
                {
                    <PlayerInteractionsTable LeagueId="@LeagueId" Interactions="@interactions" />
                }
            }
        }
        else
        {
            <h4>
                <a href="@RouteProvider.GetLeagueIndexRoute(LeagueId)" class="text-inherit">@PlayerLeagueVm.LeagueName</a>
            </h4>

            @if (TableType != PlayerTableType.Interactions)
            {
                <LeaguePlayer LeagueId="@LeagueId" PlayerVm="@PlayerLeagueVm" TableType="@TableType" HouseType="@HouseType" />
            }
            else if (Interactions?.TryGetValue(LeagueId, out var interactions) ?? false)
            {
                <PlayerInteractionsTable LeagueId="@LeagueId"
                                         Interactions="@interactions.OrderByDescending(pair => pair.Value.Interactions.Total).ThenByDescending(pair => pair.Value.Interactions.Games)" />
            }

            <NavLink class="btn btn-primary w-100 mb-3" href=@RouteProvider.GetPlayerRoute(PlayerVm.Name, TableType, HouseType)>Show all leagues</NavLink>
        }
    }
</div>

<footer class="text-white-50 d-block">
    @if (PlayerVm?.GeneratedTime != null)
    {
        <p class="mb-0">Data fetched at @PlayerVm.GeneratedTime.LocalDateTime.ToString("yyyy-MM-dd HH:mm")</p>
    }
    <p><small><i>* Calculated statistical data like killed and lost units can be approximate. It's impossible to correctly calculate situations like loosing ship by the attacker by leaving an area with port empty or using Mace Tyrell in some cases from logs.</i></small></p>
</footer>

@code {
    [Parameter]
    public string? LeagueId { get; set; }

    [Parameter]
    public string? PlayerName { get; set; }

    [Parameter]
    public string? TableTypeId { get; set; }
    private PlayerTableType TableType => Enum.TryParse<PlayerTableType>(TableTypeId ?? "", true, out var tableType) ? tableType : PlayerTableType.Seasons;

    [Parameter]
    public string? HouseId { get; set; }
    private House HouseType => Enum.TryParse<House>(HouseId ?? "", true, out var tableType) ? tableType : House.Unknown;

    private PlayerViewModel? PlayerVm { get; set; }

    private Dictionary<string, PlayersInteractions>? Interactions { get; set; }

    private PlayerLeagueViewModel? PlayerLeagueVm => LeagueId == null ?
        null :
        PlayerVm?.Leagues.FirstOrDefault(league => league.LeagueId == LeagueId);

    private bool _isInitialized;

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(PlayerName))
        {
            PlayerVm = await PlayerService.GetPlayerVm(PlayerName);
            if (TableType == PlayerTableType.Interactions)
                Interactions = await PlayerService.GetPlayerInteractionsVm(PlayerName);
        }

        _isInitialized = true;

        await base.OnParametersSetAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(PlayerName))
            PlayerVm = await PlayerService.GetPlayerVm(PlayerName);

        _isInitialized = true;

        await base.OnInitializedAsync();
    }
}