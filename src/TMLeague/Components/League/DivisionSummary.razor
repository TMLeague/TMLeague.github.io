@inject DivisionService DivisionService
@inject GameService GameService

<h5>
    <a class="text-inherit" href="@RouteProvider.GetRoute(LeagueId, SeasonId, DivisionId)">
        @(DivisionVm?.DivisionName ?? "Division")
    </a>
</h5>

@if (DivisionVm == null)
{
    <Loading></Loading>
}
else
{
    @if (!string.IsNullOrEmpty(DivisionVm.Judge))
    {
        <div class="container mb-1">
            @(DivisionVm.JudgeTitle): <MessageLink PlayerName="@DivisionVm.Judge" />
        </div>
    }
    @if (DivisionVm.WinnerPlayerName != null)
    {
        <div class="container mb-1">
            <span>Winner: </span>

            <a href="@RouteProvider.GetPlayerRoute(LeagueId, DivisionVm.WinnerPlayerName)" class="text-inherit">@DivisionVm.WinnerPlayerName</a>
        </div>
    }
    else
    {
        <div class="progress mb-1">
            @if (UnfinishedGames.Any())
            {
                <div class="progress-bar overflow-visible progress-bar-striped progress-bar-animated bg-success"
                     role="progressbar" aria-valuenow="@MinProgress"
                     aria-valuemin="0" aria-valuemax="100" style="@($"width: {MinProgress}%")">
                    @($"T{UnfinishedGames.Min(game => game.Turn)}")
                </div>
                <div class="progress-bar overflow-visible progress-bar-striped progress-bar-animated bg-warning text-dark"
                     role="progressbar" aria-valuenow="@(DivisionVm.Progress)"
                     aria-valuemin="0" aria-valuemax="100" style="@($"width: {(int)(DivisionVm.Progress - MinProgress)}%")">
                    @($"{Math.Round(DivisionVm.Progress)}%")
                </div>
            }
            else
            {
                <div class="progress-bar overflow-visible progress-bar-striped progress-bar-animated bg-success"
                     role="progressbar" aria-valuenow="@(DivisionVm.Progress)"
                     aria-valuemin="0" aria-valuemax="100" style="@($"width: {(int)DivisionVm.Progress}%")">
                    @($"{Math.Round(DivisionVm.Progress)}%")
                </div>
            }
        </div>
    }
    <div class="container mb-1 collapse @(ShowAnyDetails ? "show" : "")">
        <div class="row">
            @foreach (var (game, i) in DivisionVm.Games
           .Select((model, i) => (model, i))
           .Where(kv => ShowDetails || kv.model.IsWarning))
            {
                <div class="col-2 col-sm-3 col-md-2 col-xl-1">
                    @if (game.Id == null)
                    {
                        <span>@($"G{i + 1}")</span>
                    }
                    else
                    {
                        <a href="@RouteProvider.GetGameRoute(LeagueId, game.Id.Value)" class="text-inherit">@($"G{i + 1}")</a>
                    }
                </div>
                @if (!string.IsNullOrEmpty(game.WinnerPlayerName))
                {
                    <div class="col-4 col-sm-9 col-md-10 col-xl-5">
                        <div title="Winner" class="overflow-hidden text-nowrap">
                            <a href="@RouteProvider.GetPlayerRoute(LeagueId, game.WinnerPlayerName)" class="text-inherit">@game.WinnerPlayerName</a>
                        </div>
                    </div>
                }
                else
                {
                    <div class="col-4 col-sm-9 col-md-10 col-xl-5 py-1">
                        <GameProgress Class="h-100"
                                      Name="@game.Name" IsStalling="@game.IsStalling" IsFinished="@game.IsFinished" IsCreatedManually="@game.IsCreatedManually"
                                      Turn="@game.Turn" Progress="@game.Progress" LastActionTime="@game.LastActionTime" />
                    </div>
                }
            }
        </div>
    </div>
    <button class="btn btn-primary w-100 mb-1 @(ShowDetails || DivisionVm.WinnerPlayerName != null ? "rounded-0 rounded-bottom" : "")"
            @onclick="ChangeVisibility">
        @(ShowDetails ? "Hide" : "Show") game details
    </button>
}

@code {
    [Parameter]
    public string? LeagueId { get; set; }

    [Parameter]
    public string? SeasonId { get; set; }

    [Parameter]
    public string? DivisionId { get; set; }

    private LeagueDivisionSummaryViewModel? DivisionVm { get; set; }

    private bool ShowDetails { get; set; } = false;

    private void ChangeVisibility() => ShowDetails = !ShowDetails;

    private IEnumerable<LeagueGameSummaryViewModel> UnfinishedGames =>
        DivisionVm?.Games.Where(game => !game.IsStalling && !game.IsFinished) ?? Array.Empty<LeagueGameSummaryViewModel>();

    private int MinProgress => (int?)DivisionVm?.Games.Min(game => game.Progress) ?? 0;

    protected override async Task OnInitializedAsync()
    {
        if (LeagueId == null || SeasonId == null || DivisionId == null)
            return;

        DivisionVm = await DivisionService.GetDivisionSummaryVm(LeagueId, SeasonId, DivisionId);
    }

    private bool ShowAnyDetails => ShowDetails ||
                                   (DivisionVm?.Games.Any(model => model.IsWarning) ?? false);

}