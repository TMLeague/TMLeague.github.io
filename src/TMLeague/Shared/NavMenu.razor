@using System.Text.RegularExpressions
@implements IDisposable
@inject NavigationManager NavManager

<nav class="navbar navbar-expand-md navbar-dark mb-4">
    <div class="container-fluid">
        <NavLink class="navbar-brand" href="/" Match="NavLinkMatch.All">
            Home
        </NavLink>
        @if (LeagueId != null)
        {
            <i class="bi bi-chevron-compact-right display-6"></i>
            <NavLink class="navbar-brand" href=@RouteProvider.GetLeagueIndexRoute(LeagueId) Match="NavLinkMatch.All">
                League
            </NavLink>
            <button class="navbar-toggler @NavButtonCssClass" type="button" data-bs-toggle="collapse" data-bs-target="#navbarCollapse"
                    aria-controls="navbarCollapse" aria-label="Toggle navigation" @onclick="ToggleNavMenu">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse @NavBarCssClass" id="navbarCollapse" @onclick="ToggleNavMenu">
                <ul class="navbar-nav me-auto mb-2 mb-md-0">
                    <li class="nav-item">
                        <NavLink class="nav-link" href=@RouteProvider.GetLeagueSummaryRoute(LeagueId) Match="NavLinkMatch.Prefix">Summary</NavLink>
                    </li>
                    <li class="nav-item">
                        <NavLink class="nav-link" href=@RouteProvider.GetLeagueInteractionsRoute(LeagueId) Match="NavLinkMatch.Prefix">Interactions</NavLink>
                    </li>
                    <li class="nav-item">
                        <NavLink class="nav-link" href=@RouteProvider.GetLeagueSeasonsRoute(LeagueId) Match="NavLinkMatch.All">Seasons</NavLink>
                    </li>
                    <li class="nav-item">
                        <NavLink class="nav-link" href=@RouteProvider.GetLeagueJudgeRoute(LeagueId) Match="NavLinkMatch.All">Judge</NavLink>
                    </li>
                </ul>
            </div>
        }
    </div>
</nav>

@code {
    private string? LeagueId { get; set; }

    private bool _collapseNavMenu = true;

    private string? NavBarCssClass => _collapseNavMenu ? null : "show";
    private string? NavButtonCssClass => _collapseNavMenu ? "collapsed" : null;

    protected override void OnInitialized()
    {
        SetLeagueId(NavManager.Uri);
        NavManager.LocationChanged += LocationChanged;
    }

    private void LocationChanged(object? sender, LocationChangedEventArgs e) => SetLeagueId(e.Location);

    private void SetLeagueId(string location)
    {
        var match = Regex.Match(location, @"league\/([^\/]*)\/", RegexOptions.IgnoreCase);
        LeagueId = match.Success ? match.Groups[1].Value : null;
        StateHasChanged();
    }

    private void ToggleNavMenu()
    {
        _collapseNavMenu = !_collapseNavMenu;
    }

    public void Dispose()
    {
        NavManager.LocationChanged -= LocationChanged;
    }
}
